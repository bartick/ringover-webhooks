// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package persmysql_sqlc_gen

import (
	"context"
	"encoding/json"
	"time"
)

const createWebhookEvent = `-- name: CreateWebhookEvent :exec
INSERT INTO webhook_events (
  resource, event, timestamp, data
) VALUES (
  ?, ?, ?, ?
)
`

type CreateWebhookEventParams struct {
	Resource  string
	Event     string
	Timestamp time.Time
	Data      json.RawMessage
}

func (q *Queries) CreateWebhookEvent(ctx context.Context, arg CreateWebhookEventParams) error {
	_, err := q.db.ExecContext(ctx, createWebhookEvent,
		arg.Resource,
		arg.Event,
		arg.Timestamp,
		arg.Data,
	)
	return err
}

const deleteWebhookEvent = `-- name: DeleteWebhookEvent :exec
DELETE FROM webhook_events
WHERE id = ?
`

func (q *Queries) DeleteWebhookEvent(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteWebhookEvent, id)
	return err
}

const getWebhookEventAll = `-- name: GetWebhookEventAll :many
SELECT id, resource, event, timestamp, data
FROM webhook_events
ORDER BY created_at
`

func (q *Queries) GetWebhookEventAll(ctx context.Context) ([]WebhookEvent, error) {
	rows, err := q.db.QueryContext(ctx, getWebhookEventAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WebhookEvent
	for rows.Next() {
		var i WebhookEvent
		if err := rows.Scan(
			&i.ID,
			&i.Resource,
			&i.Event,
			&i.Timestamp,
			&i.Data,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWebhookEventAllByResourceEvent = `-- name: GetWebhookEventAllByResourceEvent :many
SELECT id, resource, event, timestamp, data
FROM webhook_events
WHERE
  resource = ? AND
  event = ?
ORDER BY created_at
`

type GetWebhookEventAllByResourceEventParams struct {
	Resource string
	Event    string
}

func (q *Queries) GetWebhookEventAllByResourceEvent(ctx context.Context, arg GetWebhookEventAllByResourceEventParams) ([]WebhookEvent, error) {
	rows, err := q.db.QueryContext(ctx, getWebhookEventAllByResourceEvent, arg.Resource, arg.Event)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WebhookEvent
	for rows.Next() {
		var i WebhookEvent
		if err := rows.Scan(
			&i.ID,
			&i.Resource,
			&i.Event,
			&i.Timestamp,
			&i.Data,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWebhookEventOneById = `-- name: GetWebhookEventOneById :one
SELECT id, resource, event, timestamp, data
FROM webhook_events
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetWebhookEventOneById(ctx context.Context, id int64) (WebhookEvent, error) {
	row := q.db.QueryRowContext(ctx, getWebhookEventOneById, id)
	var i WebhookEvent
	err := row.Scan(
		&i.ID,
		&i.Resource,
		&i.Event,
		&i.Timestamp,
		&i.Data,
	)
	return i, err
}
